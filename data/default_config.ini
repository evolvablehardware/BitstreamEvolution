[TOP-LEVEL PARAMETERS]
; Options: 	FULLY_INTRINSIC (compiles bitstreams to circuits and runs on the FPGA)
;				- Used to actually run on the hardware
;			SIM_HARDWARE (compiles the bitstreams and arbitrarily evaluates their fitness all on the computer)
;				- Used for testing the evolutionary functions and well as how crossover/mutation performs on the files
;			FULLY_SIM (generates sine waves that can be treated like variance measure outputs)
;				- Used for testing the evolutionary method and variance fitness functions, not ensuring mutation and crossover are functional on the files
; We recommend not using any of the modes other than FULLY_INTRINSIC unless you are modifying code and testing it
simulation_mode = FULLY_INTRINSIC
; This defines the base config file for this config file. If any parameters are missing from this file,
; they will be pulled from the base file
;base_config = path/to/config

[FITNESS PARAMETERS]
; Options:	VARIANCE (uses the variance fitness function)
;			SENSITIVE_PULSE_COUNT (uses the pulse count fitness function) - this function is more flat with a sharp peak
;           TOLERANT_PULSE_COUNT (uses the pulse count fitness function) - this function is more bell-shaped
;			COMBINED (uses variance and closeness to trigger voltage)
; This is independent of the data measured from the MCU, and only defines how that data should be handled
; (Note: For backwards compatibility, the PULSE_COUNT option is still included. It will use the SENSITIVE_PULSE_COUNT function)
fitness_func = VARIANCE
desired_freq = 10000
; Options:  ADD (adds the two fitness measures together with weighting)
;			MULT (multiplies the two fitness measures together)
combined_mode = MULT
pulse_weight = 2
var_weight = 0

[GA PARAMETERS]
population_size = 50
mutation_probability = 0.0021
crossover_probability = 0.7
elitism_fraction = 0.1
; Options:	SINGLE_ELITE (top individual is an elite)
;			FRAC_ELITE (uses the elitism_fraction to determine number of elites)
;			CLASSIC_TOURN (runs a classic tournament)
;			FIT_PROP_SEL (fitness-proportional selection)
;			RANK_PROP_SEL (rank-proportional selection)
;			MAP_ELITES (MAP-elites inspired method, maps waveforms to a grid and copies/mutates the best in each cell for the next generation) - not defined for SIM_HARDWARE or PULSE measurement
selection = FIT_PROP_SEL
; Options:	HAMMING_DIST (uses the average Hamming distance as the diversity measure)
;			UNIQUE (uses the count of unique individuals as the diversity measure)
diversity_measure = HAMMING_DIST
random_injection = 0.0

[INITIALIZATION PARAMETERS]
; Options:	CLONE_SEED (clones the seed hardware to every individual in the population) - not defined for FULLY_SIM
;			CLONE_SEED_MUTATE (clones the seed hardware to every indvidual, and then mutates each of them) - not defined for FULLY_SIM
;			RANDOM (completely randomizes the [modifiable] bitstream of all individuals)
;			EXISTING_POPULATION (uses the existing population as-is) - not defined for FULLY_SIM
init_mode = CLONE_SEED_MUTATE
; Options:	PULSE (until pulses detected)
;			VARIANCE (until variance crosses certain threshold)
;			NO (no randomization, just begin evolution immediately)
randomize_until = NO
randomize_threshold = 4
; Options:	RANDOM (completely randomize every circuit until you get a desired fitness result)
;			MUTATE (mutate each circuit once until you get a desired fitness result)
; Note: Randomization goes through the population. Therefore, if doing MUTATE with CLONE_SEED and pop size = 50, for example,
; there will be 50 mutations of the original circuit, then each of those will be mutated (building off of the first mutation)
; until a desired result is seen
randomize_mode = RANDOM

[STOPPING CONDITION PARAMETERS]
; Can provide a value or IGNORE for generations & target_fitness
; If IGNORE is provided, will not take target fitness/# generations into account
; Will stop when it reaches one of these; whichever comes first
; If both are set to IGNORE, then evolution will run until the user forces it to stop
generations = 500
target_fitness = IGNORE

[LOGGING PARAMETERS]
; Log Level varies from 0-4
; Higher log level = more detailed logs
; Log level 0 shows no logs
log_level = 4
save_log = true
save_plots = true
backup_workspace = true
log_file = ./workspace/log
plots_dir = ./workspace/plots
output_dir = ./prev_workspaces
asc_dir = ./workspace/experiment_asc
bin_dir = ./workspace/experiment_bin
data_dir = ./workspace/experiment_data
analysis = ./workspace/analysis
best_file = ./workspace/best.asc
generations_dir = ./workspace/generations
; Source Populations:
; Looks for subdirectories in src_populations_dir
; For every subdirectory, includes some percentage of that population in the final population (i.e. if 5 subdirectories, each contributes 20%)
src_populations_dir = ./workspace/source_populations
datetime_format = %%m/%%d/%%Y - %%H:%%M:%%S

[SYSTEM PARAMETERS]
fpga = i:0x0403:0x6010:0
usb_path = /dev/ttyUSB0

[HARDWARE PARAMETERS]
; Options:	MOORE
;			NEWSE
routing = MOORE
mcu_read_timeout = 1.1
serial_baud = 115200
accessed_columns = 14,15,24,25,40,41

